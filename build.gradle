import net.minecraftforge.gradle.common.util.ModConfig

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'java'
    id "com.wynprice.cursemaven" version "2.1.5"

}
apply plugin: 'net.minecraftforge.gradle'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'
apply from: "https://raw.githubusercontent.com/UnRealDinnerbone/GradleHelpers/master/version.gradle"

def theMinecraft_version = findLocalProperty("minecraft_version")
def theForge_Version = findLocalProperty("forge_version")
def theMappings_Version = findLocalProperty("mcp_mappings")
def theJei_Version = findLocalProperty("jei_version")

version = getVersionNumber()

group = 'com.unrealdinnerbone.simplytech'
archivesBaseName = "SimplyTech-${theMinecraft_version}"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    maven { url = "http://maven.tterrag.com/" }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

minecraft {
    mappings channel: 'snapshot', version: "${theMappings_Version}"

    accessTransformer = this.getRootProject().file("src/main/resources/META-INF/accesstransformer.cfg")
    ModConfig projectMod = new ModConfig(project, project.getName());
    projectMod.sources(project.sourceSets.main)

    runs {
        client {
            workingDirectory project.file('client')
            mods.add(projectMod)
        }
        server {
            workingDirectory project.file('server')
            mods.add(projectMod)
        }
        data {
            workingDirectory project.file('data')
            args '--mod', 'simplytech', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods.add(projectMod)
        }
    }
}

task copyData(type: Copy) {
    from project.file("src/generated/resources/")
    into project.file('src/main/resources/')
}

dependencies {
    minecraft "net.minecraftforge:forge:${theMinecraft_version}-${theForge_Version}"
    runtimeOnly fg.deobf("curse.maven:powah:3057732")
    runtimeOnly fg.deobf("curse.maven:lollipop:3057731")
    runtimeOnly fg.deobf("curse.maven:tubes-reloaded:3054898")

    implementation fg.deobf("mezz.jei:jei-${theMinecraft_version}:${theJei_Version}")
    implementation fg.deobf("mezz.jei:jei-${theMinecraft_version}:${theJei_Version}:api")
//    compileOnly fg.deobf("mezz.jei:jei-${theMinecraft_version}:${theJei_Version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-${theMinecraft_version}:${theJei_Version}")

}

String findLocalProperty(String name) {
    return this.getRootProject().property(name)
}

jar {
    manifest {
        attributes([
            "Specification-Title": "${archivesBaseName}",
            "Specification-Vendor": "UnRealDinnerbone",
            "Specification-Version": "${theMinecraft_version}",
            "Implementation-Title":  "${archivesBaseName}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"UnRealDinnerbone",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

curseforge {
    if (project.hasProperty('unreal_curse_api_key')){
        apiKey = project.getProperty('unreal_curse_api_key')
    }
    project {
        id = project.property("curseforge_id")
        changelog = getGitChangelog
        changelogType = 'markdown'
        releaseType = project.property("type")
        addGameVersion minecraft_version
        addGameVersion 'Forge'
    }
}